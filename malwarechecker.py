
import json
import requests
import re
import sys
import ipaddress

# Enter your API keys here, and uncomment the variable lines
# VirusTotalAPIKey = "VirusTotal API key"
# abuseIPDBAPIKey = "abuseIPDB API key"

# VirusTotal HASH Scan
def virusTotalHashSearch(VirusTotalAPIKey, FileHash):
    url = "https://www.virustotal.com/api/v3/files/" + FileHash
    headers = {
        "accept": "application/json",
        "x-apikey": VirusTotalAPIKey
    }
    responseVTHash = requests.get(url, headers=headers)
    responseVT_dict = json.loads(responseVTHash.text)
    
    print(str(responseVT_dict["data"]["attributes"]["meaningful_name"]))
    print(str(responseVT_dict["data"]["attributes"]["names"]))
    print(str(responseVT_dict["data"]["attributes"]["last_analysis_stats"]))
    
    # print AV scanner and malicious result; VirusTotal
    viewVirusEngines = input("View virus engines? (Y/N): ")
    if viewVirusEngines.upper() == "Y":
        for i in responseVT_dict["data"]["attributes"]["last_analysis_results"]:
            print(i + "\t\t" + str(responseVT_dict["data"]["attributes"]["last_analysis_results"][i]["result"]))
    elif viewVirusEngines.upper() == "N":
        pass       
    else:
        pass

# VirusTotal URL Scan
def virusTotalURLSearch(VirusTotalAPIKey, searchURL):
    url = "https://www.virustotal.com/api/v3/urls"
    payload = { "url": searchURL }
    headers = {
        "accept": "application/json",
        "x-apikey": VirusTotalAPIKey,
        "content-type": "application/x-www-form-urlencoded"
        }

    responseURLSearch = requests.post(url, data=payload, headers=headers)
    responseURL_dict = json.loads(responseURLSearch.text)
    
    # print encoded id for URL, and use the id as the URL
    print(responseURL_dict["data"]["id"])
    encodedSearchURL = responseURL_dict["data"]["id"]
    
    url = "https://www.virustotal.com/api/v3/analyses/" + encodedSearchURL
    headers = {
        "accept": "application/json",
        "x-apikey": VirusTotalAPIKey
        }

    responseSearchURL = requests.get(url, headers=headers)
    responseURL_dict = json.loads(responseSearchURL.text)
    
    print(str(responseURL_dict["data"]["attributes"]["stats"]))

    # print URL scanner malicious results; VirusTotal
    viewVirusEngines = input("View virus engines? (Y/N): ")
    if viewVirusEngines.upper() == "Y":
        for i in responseURL_dict["data"]["attributes"]["results"]:
            print(i + "\t\t" + str(responseURL_dict["data"]["attributes"]["results"][i]["result"]))
    elif viewVirusEngines.upper() == "N":
        pass       
    else:
        pass

# VirusTotal IP Scan
def virusTotalIPSearch(VirusTotalAPIKey, searchIP):
    
    url = "https://www.virustotal.com/api/v3/ip_addresses/" + str(searchIP)

    headers = {
        "accept": "application/json",
        "x-apikey": VirusTotalAPIKey
    }

    responseSearchIP = requests.get(url, headers=headers)
    responseIP_dict = json.loads(responseSearchIP.text)
    try: print("Last Analysis Stats: " + str(responseIP_dict["data"]["attributes"]["last_analysis_stats"]))
    except KeyError: pass
    try: print("Who Is: " + str(responseIP_dict["data"]["attributes"]["whois"]))
    except KeyError: pass
    print("\n")
    try: print("Country: " + str(responseIP_dict["data"]["attributes"]["country"]))
    except KeyError: pass
    try: print("Total Votes: " + str(responseIP_dict["data"]["attributes"]["total_votes"]))
    except KeyError: pass
    try: print("Context: " + str(responseIP_dict["data"]["attributes"]["crowdsourced_context"]))
    except KeyError: pass
    print("\n")
    try: print("SAN: " + str(responseIP_dict["data"]["attributes"]["last_https_certificate"]["extensions"]["subject_alternative_name"]))
    except KeyError: pass
    print("\n")
    try: print("Valid: " + str(responseIP_dict["data"]["attributes"]["last_https_certificate"]["validity"]))
    except KeyError: pass
    try: print("Issuer: " + str(responseIP_dict["data"]["attributes"]["last_https_certificate"]["issuer"]))
    except KeyError: pass
    try: print("Owner: " + str(responseIP_dict["data"]["attributes"]["as_owner"]))
    except KeyError: pass


# AbuseIPDB IP scan
def abuseIPDBSearch(abuseIPDBAPIKey, searchIP):
    if is_ip(userInput) or is_ipv6(userInput):
        url = 'https://api.abuseipdb.com/api/v2/check'
        querystring = {
            'ipAddress': searchIP,
            'maxAgeInDays': '90'
            }
    
        headers = {
            'Accept': 'application/json',
            'Key': abuseIPDBAPIKey
            }

        responseIPSearch = requests.request(method='GET', url=url, headers=headers, params=querystring)
        
        responseIP_dict = json.loads(responseIPSearch.text)
        print(json.dumps(responseIP_dict, sort_keys=True, indent=4))
        #    print(responseIP_dict)
    else:
        print("Enter a valid IP address")
        pass


# determine if userInput is hash, URL, or IP
def is_hash(userInput):
    regex = r"^[0-9a-fA-F]{64}$"
    return bool(re.match(regex, userInput))

def is_url(userInput):
    regex = r"^(http|https)://[^\s]*$"
    return bool(re.match(regex, userInput))

# IPv4
def is_ip(userInput):
#    regex = r"^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$"
#    return bool(re.match(regex, userInput))

    try:
       ipaddress.IPv4Address(userInput)
       return True
    except:
       ipaddress.AddressValueError()
       return False


# IPv6
def is_ipv6(userInput):
    try:
        ipaddress.IPv6Address(userInput)
        return True
    except:
        ipaddress.AddressValueError()
        return False

# run function assigned to hash, URL or IP, VirusTotal
def check_string(userInput):
    if is_hash(userInput):
        print("hash \n")
        FileHash = userInput
        virusTotalHashSearch(VirusTotalAPIKey, FileHash)
        
    elif is_url(userInput):
        print("url \n")
        searchURL = userInput
        virusTotalURLSearch(VirusTotalAPIKey, searchURL)
        
    elif is_ip(userInput) or is_ipv6(userInput) :
        print("ip \n")
        searchIP = userInput
        virusTotalIPSearch(VirusTotalAPIKey, searchIP)
        
    elif userInput.lower() == 'q':
        print("You exited the program")
        sys.exit(0)
    else:
        print("Not a hash, URL, or IP address \n")

# Program Starts

while True:
    print("\n")
    print("Select a service to check: \n" + 
          "1. VirusTotal \n" +
          "2. AbuseIPDB \n" +
          "Q to quit") 
    print("\n")
    selectedService = str(input("Service: "))
    if selectedService == '1':
        userInput = input("Enter a hash, URL or IP to search, Q to quit: ")
        check_string(userInput)
    
    elif selectedService == '2':
        userInput = input("Enter an IPv4 or IPv6 address to search: ")
        abuseIPDBSearch(abuseIPDBAPIKey, userInput)


    elif selectedService.lower() == 'q':
        print("You exited the program")
        sys.exit(0)
    else: 
        print("Enter a valid service")
        pass
